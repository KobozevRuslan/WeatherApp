{"ast":null,"code":"var _jsxFileName = \"/home/cmdb-123844/Desktop/WeatherApp/Weater-app/src/modules/languageFolder/Index.jsx\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/React.createContext();\nconst LanguageConsumer = LanguageContext.Consumer; // export default class LanguageProvider extends React.Component {\n//   state = {\n//     language: \"french\"\n//   };\n//   updateLanguage = e => this.setState({ language: e.target.value });\n//   render() {\n//     return (\n//       <LanguageContext.Provider\n//         value={{\n//           language: this.state.language,\n//           updateLanguage: this.updateLanguage\n//         }}\n//       >\n//         {this.props.children}\n//       </LanguageContext.Provider>\n//     );\n//   }\n// }\n// const LanguageProvider = (props) => {\n//   const [language, setLanguage] = useState('french')\n//   const updateLangug = (e) => {\n//     return setLanguage(e.target.value)\n//   }\n//   console.log('props', props);\n//   return(\n//     <LanguageContext.Provider\n//       value={{\n//         language: language,\n//         updateLangug: updateLangug,\n//       }}\n//     >\n//       {props.children}\n//     </LanguageContext.Provider>\n//   )\n// }\n// export default LanguageProvider;\n\nexport const HeaderTest = () => {\n  return /*#__PURE__*/_jsxDEV(LanguageConsumer, {\n    children: updateLanguage => {\n      console.log('updateLanguage', updateLanguage);\n\n      /*#__PURE__*/\n      _jsxDEV(\"header\", {\n        children: [\"see this site in\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: updateLanguage,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"french\",\n            children: \"french\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"english\",\n            children: \"english\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"italian\",\n            children: \"italian\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_c = HeaderTest;\nexport const TranslatableText = props => /*#__PURE__*/_jsxDEV(LanguageConsumer, {\n  children: ({\n    language\n  }) => props.dictionary[language]\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 69,\n  columnNumber: 3\n}, this);\n_c2 = TranslatableText;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HeaderTest\");\n$RefreshReg$(_c2, \"TranslatableText\");","map":{"version":3,"sources":["/home/cmdb-123844/Desktop/WeatherApp/Weater-app/src/modules/languageFolder/Index.jsx"],"names":["React","useState","LanguageContext","createContext","LanguageConsumer","Consumer","HeaderTest","updateLanguage","console","log","TranslatableText","props","language","dictionary"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,eAAe,gBAAGF,KAAK,CAACG,aAAN,EAAxB;AACA,MAAMC,gBAAgB,GAAGF,eAAe,CAACG,QAAzC,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,sBACE,QAAC,gBAAD;AAAA,cACIC,cAAD,IAAoB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,cAA9B;;AACA;AACA;AAAA,oDAEE;AAAQ,UAAA,QAAQ,EAAEA,cAAlB;AAAA,kCACE;AAAQ,YAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AASA;AAZJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAjBM;KAAMD,U;AAoBb,OAAO,MAAMI,gBAAgB,GAAGC,KAAK,iBACnC,QAAC,gBAAD;AAAA,YACG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAkBD,KAAK,CAACE,UAAN,CAAiBD,QAAjB;AADrB;AAAA;AAAA;AAAA;AAAA,QADK;MAAMF,gB","sourcesContent":["import React, { useState } from \"react\";\n\nconst LanguageContext = React.createContext();\nconst LanguageConsumer = LanguageContext.Consumer;\n\n// export default class LanguageProvider extends React.Component {\n//   state = {\n//     language: \"french\"\n//   };\n\n//   updateLanguage = e => this.setState({ language: e.target.value });\n\n//   render() {\n//     return (\n//       <LanguageContext.Provider\n//         value={{\n//           language: this.state.language,\n//           updateLanguage: this.updateLanguage\n//         }}\n//       >\n//         {this.props.children}\n//       </LanguageContext.Provider>\n//     );\n//   }\n// }\n\n// const LanguageProvider = (props) => {\n//   const [language, setLanguage] = useState('french')\n\n//   const updateLangug = (e) => {\n//     return setLanguage(e.target.value)\n//   }\n//   console.log('props', props);\n//   return(\n//     <LanguageContext.Provider\n//       value={{\n//         language: language,\n//         updateLangug: updateLangug,\n//       }}\n//     >\n//       {props.children}\n//     </LanguageContext.Provider>\n//   )\n// }\n\n// export default LanguageProvider;\n\nexport const HeaderTest = () => {\n  return (\n    <LanguageConsumer>\n      {(updateLanguage) => {\n        console.log('updateLanguage', updateLanguage);\n        (\n        <header>\n          see this site in\n          <select onChange={updateLanguage}>\n            <option value=\"french\">french</option>\n            <option value=\"english\">english</option>\n            <option value=\"italian\">italian</option>\n          </select>\n        </header>\n      )}}\n    </LanguageConsumer>\n  );\n};\n\n\nexport const TranslatableText = props => (\n  <LanguageConsumer>\n    {({ language }) => props.dictionary[language]}\n  </LanguageConsumer>\n);\n"]},"metadata":{},"sourceType":"module"}