{"ast":null,"code":"var _jsxFileName = \"/home/cmdb-123844/Desktop/WeatherApp/WeatherApp/Weater-app/src/components/searchInput/SearchInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Hint } from 'react-autocomplete-hint';\nimport { fetchData } from '../../store/thunk/action/app';\nimport { languegeObject } from '../../store/data/languageObject';\nimport { SearchWrapper } from './styledComponents/SearchInput';\nimport cities from 'cities.json';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchInput = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.app);\n  const {\n    weather,\n    lang\n  } = state;\n\n  const onKeyPressHandler = e => {\n    if (e.key === 'Enter') {\n      dispatch(fetchData(e.target.value));\n    }\n  };\n\n  const [value, setValue] = useState('');\n  const [isOpen, setIsOpen] = useState(true);\n  const filteredCountries = cities.filter(country => {\n    return country.name.toLowerCase().includes(value.toLowerCase());\n  });\n\n  const itemClickHandler = e => {\n    setValue(e.target.textContent);\n    setIsOpen(!isOpen);\n  };\n\n  const inputClickHandler = () => {\n    setIsOpen(true);\n  };\n\n  console.log('countries', countries);\n  return /*#__PURE__*/_jsxDEV(SearchWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Hint, {\n      options: [weather.name],\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchInput\",\n        value: value,\n        placeholder: languegeObject[lang].placeholder,\n        onKeyPress: onKeyPressHandler,\n        onChange: e => setValue(e.target.value),\n        onClick: inputClickHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"autocomplete\",\n      children: value && isOpen ? filteredCountries.map((country, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"autocompelete_item\",\n          onClick: itemClickHandler,\n          children: country.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this);\n      }) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchInput, \"kEwXlcSOoimtVZAVZ+SuTlb5cTU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = SearchInput;\nexport default SearchInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchInput\");","map":{"version":3,"sources":["/home/cmdb-123844/Desktop/WeatherApp/WeatherApp/Weater-app/src/components/searchInput/SearchInput.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","Hint","fetchData","languegeObject","SearchWrapper","cities","axios","SearchInput","dispatch","state","app","weather","lang","onKeyPressHandler","e","key","target","value","setValue","isOpen","setIsOpen","filteredCountries","filter","country","name","toLowerCase","includes","itemClickHandler","textContent","inputClickHandler","console","log","countries","placeholder","map","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,yBAArB;AAEA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,cAAT,QAA+B,iCAA/B;AAEA,SAASC,aAAT,QAA8B,gCAA9B;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,KAAK,GAAGT,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,GAAlB,CAAzB;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBH,KAA1B;;AAEA,QAAMI,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACrBP,MAAAA,QAAQ,CAACN,SAAS,CAACY,CAAC,CAACE,MAAF,CAASC,KAAV,CAAV,CAAR;AACD;AACF,GAJD;;AAMA,QAAM,CAACA,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACqB,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMuB,iBAAiB,GAAGhB,MAAM,CAACiB,MAAP,CAAeC,OAAD,IAAa;AACnD,WAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCT,KAAK,CAACQ,WAAN,EAApC,CAAP;AACD,GAFyB,CAA1B;;AAIA,QAAME,gBAAgB,GAAIb,CAAD,IAAO;AAC9BI,IAAAA,QAAQ,CAACJ,CAAC,CAACE,MAAF,CAASY,WAAV,CAAR;AACAR,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAHD;;AAKA,QAAMU,iBAAiB,GAAG,MAAM;AAC9BT,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAFD;;AAKAU,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,SAAzB;AACA,sBACE,QAAC,aAAD;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAE,CAACrB,OAAO,CAACa,IAAT,CAAf;AAAA,6BACE;AACE,QAAA,SAAS,EAAC,aADZ;AAEE,QAAA,KAAK,EAAEP,KAFT;AAGE,QAAA,WAAW,EAAEd,cAAc,CAACS,IAAD,CAAd,CAAqBqB,WAHpC;AAIE,QAAA,UAAU,EAAEpB,iBAJd;AAKE,QAAA,QAAQ,EAAGC,CAAD,IAAOI,QAAQ,CAACJ,CAAC,CAACE,MAAF,CAASC,KAAV,CAL3B;AAME,QAAA,OAAO,EAAEY;AANX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAI,MAAA,SAAS,EAAC,cAAd;AAAA,gBACGZ,KAAK,IAAIE,MAAT,GACGE,iBAAiB,CAACa,GAAlB,CAAsB,CAACX,OAAD,EAAUY,KAAV,KAAoB;AACxC,4BACE;AAEE,UAAA,SAAS,EAAC,oBAFZ;AAGE,UAAA,OAAO,EAAER,gBAHX;AAAA,oBAKGJ,OAAO,CAACC;AALX,WACOW,KADP;AAAA;AAAA;AAAA;AAAA,gBADF;AASD,OAVD,CADH,GAYG;AAbN;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CA3DD;;GAAM5B,W;UACaR,W,EACHC,W;;;KAFVO,W;AA6DN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Hint } from 'react-autocomplete-hint';\n\nimport { fetchData } from '../../store/thunk/action/app';\nimport { languegeObject } from '../../store/data/languageObject';\n\nimport { SearchWrapper } from './styledComponents/SearchInput';\n\nimport cities from 'cities.json';\nimport axios from 'axios';\n\nconst SearchInput = () => {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state.app);\n\n  const { weather, lang } = state;\n\n  const onKeyPressHandler = (e) => {\n    if (e.key === 'Enter') {\n      dispatch(fetchData(e.target.value));\n    }\n  };\n\n  const [value, setValue] = useState('');\n  const [isOpen, setIsOpen] = useState(true);\n\n  const filteredCountries = cities.filter((country) => {\n    return country.name.toLowerCase().includes(value.toLowerCase());\n  });\n\n  const itemClickHandler = (e) => {\n    setValue(e.target.textContent);\n    setIsOpen(!isOpen);\n  };\n\n  const inputClickHandler = () => {\n    setIsOpen(true);\n  };\n\n\n  console.log('countries', countries);\n  return (\n    <SearchWrapper>\n      <Hint options={[weather.name]}>\n        <input\n          className=\"searchInput\"\n          value={value}\n          placeholder={languegeObject[lang].placeholder}\n          onKeyPress={onKeyPressHandler}\n          onChange={(e) => setValue(e.target.value)}\n          onClick={inputClickHandler}\n        />\n      </Hint>\n      <ul className=\"autocomplete\">\n        {value && isOpen\n          ? filteredCountries.map((country, index) => {\n              return (\n                <li\n                  key={index}\n                  className=\"autocompelete_item\"\n                  onClick={itemClickHandler}\n                >\n                  {country.name}\n                </li>\n              );\n            })\n          : null}\n      </ul>\n    </SearchWrapper>\n  );\n};\n\nexport default SearchInput;\n"]},"metadata":{},"sourceType":"module"}