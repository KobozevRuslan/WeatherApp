{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { languegeObject } from '../../data/languageObject';\nconst API_KEY = 'd6487c851d4294ca86263fcb2861f71f';\nconst URL = 'https://api.openweathermap.org/data/2.5/weather'; //action\n\nexport const fetchWeatherAction = createAsyncThunk('weather/fetch', async (payload, {\n  rejectWithValue,\n  getState,\n  dispatch\n}) => {\n  try {\n    const {\n      data\n    } = await axios.get(URL, {\n      params: {\n        q: payload,\n        units: 'metric',\n        APPID: API_KEY\n      }\n    });\n    return data;\n  } catch (error) {\n    var _error$response;\n\n    if (!(error === null || error === void 0 ? void 0 : error.response)) {\n      throw error;\n    }\n\n    return rejectWithValue(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n  }\n}); //slice\n\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState: {\n    state: languegeObject,\n    test: ''\n  },\n  extraReducers: builder => {\n    //pending\n    builder.addCase(fetchWeatherAction.pending, test => {\n      test.isLoading = true;\n    }); //fulfilled\n\n    builder.addCase(fetchWeatherAction.fulfilled, (test, action) => {\n      test.weather = action === null || action === void 0 ? void 0 : action.payload;\n      test.isLoading = false;\n      test.error = undefined;\n    }); //rejected\n\n    builder.addCase(fetchWeatherAction.rejected, (state, action) => {\n      state.isLoading = false;\n      state.weather = undefined;\n      state.languege = undefined;\n      state.error = action === null || action === void 0 ? void 0 : action.payload;\n    });\n  }\n});\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["/home/cmdb-123844/Desktop/WeatherApp/Weater-app/src/store/redux/slices/weatherSlices.js"],"names":["createAsyncThunk","createSlice","axios","languegeObject","API_KEY","URL","fetchWeatherAction","payload","rejectWithValue","getState","dispatch","data","get","params","q","units","APPID","error","response","weatherSlice","name","initialState","state","test","extraReducers","builder","addCase","pending","isLoading","fulfilled","action","weather","undefined","rejected","languege","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,MAAMC,OAAO,GAAG,kCAAhB;AACA,MAAMC,GAAG,GAAG,iDAAZ,C,CAEA;;AACA,OAAO,MAAMC,kBAAkB,GAAGN,gBAAgB,CAChD,eADgD,EAEhD,OAAOO,OAAP,EAAgB;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA,QAAnB;AAA6BC,EAAAA;AAA7B,CAAhB,KAA4D;AAC1D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,KAAK,CAACU,GAAN,CAAUP,GAAV,EAAe;AACpCQ,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAEP,OADG;AAENQ,QAAAA,KAAK,EAAE,QAFD;AAGNC,QAAAA,KAAK,EAAEZ;AAHD;AAD4B,KAAf,CAAvB;AAOA,WAAOO,IAAP;AACD,GATD,CASE,OAAOM,KAAP,EAAc;AAAA;;AACd,QAAI,EAACA,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEC,QAAR,CAAJ,EAAsB;AACpB,YAAMD,KAAN;AACD;;AACD,WAAOT,eAAe,CAACS,KAAD,aAACA,KAAD,0CAACA,KAAK,CAAEC,QAAR,oDAAC,gBAAiBP,IAAlB,CAAtB;AACD;AACF,CAlB+C,CAA3C,C,CAqBP;;AACA,MAAMQ,YAAY,GAAGlB,WAAW,CAAC;AAC/BmB,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAEnB,cADK;AAEZoB,IAAAA,IAAI,EAAE;AAFM,GAFiB;AAM/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,kBAAkB,CAACqB,OAAnC,EAA6CJ,IAAD,IAAU;AACpDA,MAAAA,IAAI,CAACK,SAAL,GAAiB,IAAjB;AACD,KAFD,EAF0B,CAK1B;;AACAH,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,kBAAkB,CAACuB,SAAnC,EAA8C,CAACN,IAAD,EAAOO,MAAP,KAAkB;AAC9DP,MAAAA,IAAI,CAACQ,OAAL,GAAeD,MAAf,aAAeA,MAAf,uBAAeA,MAAM,CAAEvB,OAAvB;AACAgB,MAAAA,IAAI,CAACK,SAAL,GAAiB,KAAjB;AACAL,MAAAA,IAAI,CAACN,KAAL,GAAae,SAAb;AACD,KAJD,EAN0B,CAW1B;;AACAP,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,kBAAkB,CAAC2B,QAAnC,EAA6C,CAACX,KAAD,EAAQQ,MAAR,KAAmB;AAC9DR,MAAAA,KAAK,CAACM,SAAN,GAAkB,KAAlB;AACAN,MAAAA,KAAK,CAACS,OAAN,GAAgBC,SAAhB;AACAV,MAAAA,KAAK,CAACY,QAAN,GAAiBF,SAAjB;AACAV,MAAAA,KAAK,CAACL,KAAN,GAAca,MAAd,aAAcA,MAAd,uBAAcA,MAAM,CAAEvB,OAAtB;AACD,KALD;AAMD;AAxB8B,CAAD,CAAhC;AA2BA,eAAeY,YAAY,CAACgB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { languegeObject } from '../../data/languageObject';\n\nconst API_KEY = 'd6487c851d4294ca86263fcb2861f71f';\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\n\n//action\nexport const fetchWeatherAction = createAsyncThunk(\n  'weather/fetch',\n  async (payload, { rejectWithValue, getState, dispatch }) => {\n    try {\n      const { data } = await axios.get(URL, {\n        params: {\n          q: payload,\n          units: 'metric',\n          APPID: API_KEY,\n        },\n      });\n      return data;\n    } catch (error) {\n      if (!error?.response) {\n        throw error;\n      }\n      return rejectWithValue(error?.response?.data);\n    }\n  }\n);\n\n//slice\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState: {\n    state: languegeObject,\n    test: ''\n  },\n  extraReducers: (builder) => {\n    //pending\n    builder.addCase(fetchWeatherAction.pending, (test) => {\n      test.isLoading = true;\n    });\n    //fulfilled\n    builder.addCase(fetchWeatherAction.fulfilled, (test, action) => {\n      test.weather = action?.payload;\n      test.isLoading = false;\n      test.error = undefined;\n    });\n    //rejected\n    builder.addCase(fetchWeatherAction.rejected, (state, action) => {\n      state.isLoading = false;\n      state.weather = undefined;\n      state.languege = undefined;\n      state.error = action?.payload;\n    });\n  },\n});\n\nexport default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}