{"ast":null,"code":"var _jsxFileName = \"/home/cmdb-123844/Desktop/WeatherApp/WeatherApp/Weater-app/src/components/testComponents/Test.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Autocomplete from 'react-autocomplete';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchData } from '../../store/thunk/action/app';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Test = () => {\n  _s();\n\n  const [value, setValue] = useState('');\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.app);\n  const {\n    weather\n  } = state;\n\n  const onKeyPressHandler = e => {\n    if (e.key === 'Enter') {\n      dispatch(fetchData(e.target.value));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    items: [{\n      id: 'foo',\n      label: weather.name\n    }],\n    shouldItemRender: (item, value) => item.label.toLowerCase().indexOf(value.toLowerCase()) > -1,\n    getItemValue: item => item.label,\n    renderItem: (item, highlighted) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: highlighted ? 'red' : 'transparent'\n      },\n      children: item.label\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this),\n    value: value,\n    onChange: e => setValue(e.target.value),\n    onSelect: e => setValue(e),\n    onClick: true,\n    onKeyPress: onKeyPressHandler\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Test, \"/nnsXEjTLast9J2/JcvBnBVbJEE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/home/cmdb-123844/Desktop/WeatherApp/WeatherApp/Weater-app/src/components/testComponents/Test.jsx"],"names":["React","useState","Autocomplete","useDispatch","useSelector","fetchData","Test","value","setValue","dispatch","state","app","weather","onKeyPressHandler","e","key","target","id","label","name","item","toLowerCase","indexOf","highlighted","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,8BAA1B;;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMQ,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAMO,KAAK,GAAGN,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACC,GAAlB,CAAzB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcF,KAApB;;AAEA,QAAMG,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACrBN,MAAAA,QAAQ,CAACJ,SAAS,CAACS,CAAC,CAACE,MAAF,CAAST,KAAV,CAAV,CAAR;AACD;AACF,GAJD;;AAMA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAE,CAAC;AAAEU,MAAAA,EAAE,EAAE,KAAN;AAAaC,MAAAA,KAAK,EAAEN,OAAO,CAACO;AAA5B,KAAD,CADT;AAEE,IAAA,gBAAgB,EAAE,CAACC,IAAD,EAAOb,KAAP,KAChBa,IAAI,CAACF,KAAL,CAAWG,WAAX,GAAyBC,OAAzB,CAAiCf,KAAK,CAACc,WAAN,EAAjC,IAAwD,CAAC,CAH7D;AAKE,IAAA,YAAY,EAAGD,IAAD,IAAUA,IAAI,CAACF,KAL/B;AAME,IAAA,UAAU,EAAE,CAACE,IAAD,EAAOG,WAAP,kBACV;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAED,WAAW,GAAG,KAAH,GAAW;AAAzC,OAFT;AAAA,gBAIGH,IAAI,CAACF;AAJR,OACOE,IAAI,CAACH,EADZ;AAAA;AAAA;AAAA;AAAA,YAPJ;AAcE,IAAA,KAAK,EAAEV,KAdT;AAeE,IAAA,QAAQ,EAAGO,CAAD,IAAON,QAAQ,CAACM,CAAC,CAACE,MAAF,CAAST,KAAV,CAf3B;AAgBE,IAAA,QAAQ,EAAGO,CAAD,IAAON,QAAQ,CAACM,CAAD,CAhB3B;AAiBE,IAAA,OAAO,MAjBT;AAkBE,IAAA,UAAU,EAAED;AAlBd;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CApCM;;GAAMP,I;UAGMH,W,EAEHC,W;;;KALHE,I","sourcesContent":["import React, { useState } from 'react';\nimport Autocomplete from 'react-autocomplete';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchData } from '../../store/thunk/action/app';\n\nexport const Test = () => {\n  const [value, setValue] = useState('');\n\n  const dispatch = useDispatch();\n\n  const state = useSelector((state) => state.app);\n  const { weather } = state;\n\n  const onKeyPressHandler = (e) => {\n    if (e.key === 'Enter') {\n      dispatch(fetchData(e.target.value));\n    }\n  };\n\n  return (\n    <Autocomplete\n      items={[{ id: 'foo', label: weather.name }]}\n      shouldItemRender={(item, value) =>\n        item.label.toLowerCase().indexOf(value.toLowerCase()) > -1\n      }\n      getItemValue={(item) => item.label}\n      renderItem={(item, highlighted) => (\n        <div\n          key={item.id}\n          style={{ backgroundColor: highlighted ? 'red' : 'transparent' }}\n        >\n          {item.label}\n        </div>\n      )}\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      onSelect={(e) => setValue(e)}\n      onClick\n      onKeyPress={onKeyPressHandler}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}