{"ast":null,"code":"import React, { forwardRef, useState, useRef } from 'react';\nimport { Box, Input, List, ListItem, Flex, Badge } from '@chakra-ui/react';\nimport { matchSorter } from 'match-sorter';\nimport { SmallAddIcon, CloseIcon, CheckCircleIcon } from '@chakra-ui/icons';\nimport mergeRefs from 'react-merge-refs';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar defaultRenderCheckIcon = function defaultRenderCheckIcon(option) {\n  return React.createElement(CheckCircleIcon, {\n    color: \"green.500\",\n    \"data-label\": option.label,\n    mr: 2\n  });\n};\n\nvar defaultCreateIcon = function defaultCreateIcon() {\n  return React.createElement(React.Fragment, null, React.createElement(SmallAddIcon, {\n    color: \"green.500\",\n    mr: 2\n  }), \"Create option\");\n};\n\nvar defaultRenderBadge = function defaultRenderBadge(option) {\n  return React.createElement(Badge, {\n    borderRadius: \"full\",\n    px: \"2\",\n    colorScheme: \"teal\",\n    mx: 1,\n    cursor: \"pointer\"\n  }, option.label, React.createElement(CloseIcon, {\n    ml: 1,\n    w: 2,\n    h: 2,\n    mb: \"4px\"\n  }));\n};\n\nvar Autocomplete = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var options = _ref.options,\n      result = _ref.result,\n      setResult = _ref.setResult,\n      bgHoverColor = _ref.bgHoverColor,\n      allowCreation = _ref.allowCreation,\n      notFoundText = _ref.notFoundText,\n      _ref$renderBadge = _ref.renderBadge,\n      renderBadge = _ref$renderBadge === void 0 ? defaultRenderBadge : _ref$renderBadge,\n      _ref$renderCheckIcon = _ref.renderCheckIcon,\n      renderCheckIcon = _ref$renderCheckIcon === void 0 ? defaultRenderCheckIcon : _ref$renderCheckIcon,\n      _ref$renderCreateIcon = _ref.renderCreateIcon,\n      renderCreateIcon = _ref$renderCreateIcon === void 0 ? defaultCreateIcon : _ref$renderCreateIcon,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"options\", \"result\", \"setResult\", \"bgHoverColor\", \"allowCreation\", \"notFoundText\", \"renderBadge\", \"renderCheckIcon\", \"renderCreateIcon\"]);\n\n  var _useState = useState(options),\n      optionsCopy = _useState[0],\n      setOptionsCopy = _useState[1];\n\n  var _useState2 = useState(),\n      partialResult = _useState2[0],\n      setPartialResult = _useState2[1];\n\n  var _useState3 = useState(false),\n      displayOptions = _useState3[0],\n      setDisplayOptions = _useState3[1];\n\n  var _useState4 = useState(),\n      inputValue = _useState4[0],\n      setInputValue = _useState4[1];\n\n  var inputRef = useRef(null);\n\n  var filterOptions = function filterOptions(inputValue) {\n    if (inputValue) {\n      setDisplayOptions(true);\n      setPartialResult(matchSorter(optionsCopy, inputValue, {\n        keys: ['label', 'value']\n      }));\n      setInputValue(inputValue);\n    } else {\n      setDisplayOptions(false);\n    }\n  };\n\n  var selectOption = function selectOption(option) {\n    if (result.includes(option)) {\n      setResult([].concat(result.filter(function (existingOption) {\n        return existingOption.value !== option.value;\n      })));\n    } else {\n      setResult([option].concat(result));\n    }\n  };\n\n  var isOptionSelected = function isOptionSelected(option) {\n    return result.filter(function (selectedOption) {\n      return selectedOption.value === option.value;\n    }).length > 0;\n  };\n\n  var createOption = function createOption() {\n    if (inputValue && allowCreation) {\n      var newOption = {\n        label: inputValue,\n        value: inputValue\n      };\n      setOptionsCopy([newOption].concat(optionsCopy));\n      selectOption(newOption);\n      setDisplayOptions(false);\n\n      if (inputRef && inputRef.current !== null) {\n        inputRef.current.value = '';\n      }\n    }\n  };\n\n  var selectOptionFromList = function selectOptionFromList(option) {\n    selectOption(option);\n    setDisplayOptions(false);\n\n    if (inputRef && inputRef.current !== null) {\n      inputRef.current.value = '';\n    }\n  };\n\n  var checkIcon = function checkIcon(option) {\n    if (isOptionSelected(option)) {\n      return renderCheckIcon(option);\n    }\n\n    return null;\n  };\n\n  return React.createElement(Box, {\n    \"data-testid\": \"simple-autocomplete\"\n  }, result.length > 0 && React.createElement(Box, {\n    my: 2\n  }, result.map(function (option) {\n    return React.createElement(Box, {\n      d: \"inline-block\",\n      onClick: function onClick() {\n        return selectOption(option);\n      },\n      key: option.value\n    }, renderBadge(option));\n  })), React.createElement(Input, Object.assign({\n    onChange: function onChange(e) {\n      return filterOptions(e.currentTarget.value);\n    },\n    ref: mergeRefs([inputRef, ref])\n  }, rest)), displayOptions && React.createElement(List, {\n    borderWidth: \"1px\",\n    borderColor: \"gray.200\",\n    borderRadius: \"md\",\n    boxShadow: \"6px 5px 8px rgba(0,50,30,0.02)\",\n    mt: 2\n  }, partialResult == null ? void 0 : partialResult.map(function (option) {\n    return React.createElement(ListItem, {\n      key: option.value,\n      _hover: {\n        bg: bgHoverColor || 'gray.100'\n      },\n      my: 1,\n      p: 2,\n      cursor: \"pointer\",\n      onClick: function onClick() {\n        return selectOptionFromList(option);\n      }\n    }, React.createElement(Flex, {\n      align: \"center\"\n    }, checkIcon(option), option.label));\n  }), !(partialResult != null && partialResult.length) && allowCreation && React.createElement(ListItem, {\n    _hover: {\n      bg: bgHoverColor || 'gray.100'\n    },\n    my: 1,\n    p: 2,\n    cursor: \"pointer\",\n    \"data-testid\": \"create-option\",\n    onClick: function onClick() {\n      return createOption();\n    }\n  }, React.createElement(Flex, {\n    align: \"center\"\n  }, renderCreateIcon())), !(partialResult != null && partialResult.length) && !allowCreation && React.createElement(ListItem, {\n    my: 1,\n    p: 2,\n    \"data-testid\": \"not-found\"\n  }, React.createElement(Flex, {\n    align: \"center\"\n  }, notFoundText))));\n});\nAutocomplete.displayName = 'Autocomplete';\nAutocomplete.defaultProps = {\n  notFoundText: 'Not found',\n  allowCreation: true\n};\nexport { Autocomplete };","map":{"version":3,"sources":["../src/index.tsx"],"names":["defaultRenderCheckIcon","color","option","label","mr","defaultCreateIcon","defaultRenderBadge","borderRadius","px","colorScheme","mx","cursor","ml","w","h","mb","Autocomplete","forwardRef","options","result","setResult","bgHoverColor","allowCreation","notFoundText","renderBadge","renderCheckIcon","renderCreateIcon","rest","optionsCopy","setOptionsCopy","useState","partialResult","setPartialResult","displayOptions","setDisplayOptions","inputValue","setInputValue","inputRef","useRef","filterOptions","matchSorter","keys","selectOption","existingOption","isOptionSelected","selectedOption","createOption","newOption","value","selectOptionFromList","checkIcon","my","d","onClick","key","React","onChange","e","ref","mergeRefs","borderWidth","borderColor","boxShadow","mt","_hover","bg","p","align"],"mappings":"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","sourcesContent":["import React, { useState, useRef, forwardRef } from 'react';\nimport {\n  Badge,\n  Box,\n  Flex,\n  Input,\n  InputProps,\n  List,\n  ListItem,\n} from '@chakra-ui/react';\nimport { matchSorter } from 'match-sorter';\nimport { CheckCircleIcon, CloseIcon, SmallAddIcon } from '@chakra-ui/icons';\nimport mergeRefs from 'react-merge-refs';\n\nexport type Option = {\n  value: string;\n  label: string;\n  [key: string]: unknown;\n};\n\nexport interface AutocompleteProps extends InputProps {\n  /** Options to be displayed in the autocomplete */\n  options: Option[];\n  /** Result that gets populated with the selected options */\n  result: Option[];\n  /** Callback to set the result */\n  setResult: (options: Option[]) => void;\n  /** Render prop to customize the check icon */\n  renderCheckIcon?: (option: Option) => React.ReactNode;\n  /** Render prop to customize the create icon */\n  renderCreateIcon?: (text?: string) => React.ReactNode;\n  /** Input placeholder */\n  placeholder?: string;\n  /** Render prop to customize the badges */\n  renderBadge?: (option: Option) => React.ReactNode;\n  bgHoverColor?: string;\n  allowCreation?: boolean;\n  notFoundText?: string;\n}\n\nconst defaultRenderCheckIcon = (option: Option) => {\n  return <CheckCircleIcon color=\"green.500\" data-label={option.label} mr={2} />;\n};\n\nconst defaultCreateIcon = () => (\n  <>\n    <SmallAddIcon color=\"green.500\" mr={2} />\n    Create option\n  </>\n);\n\nconst defaultRenderBadge = (option: Option) => {\n  return (\n    <Badge\n      borderRadius=\"full\"\n      px=\"2\"\n      colorScheme=\"teal\"\n      mx={1}\n      cursor=\"pointer\"\n    >\n      {option.label}\n      <CloseIcon ml={1} w={2} h={2} mb=\"4px\" />\n    </Badge>\n  );\n};\n\nexport const Autocomplete = forwardRef<HTMLInputElement, AutocompleteProps>(\n  (\n    {\n      options,\n      result,\n      setResult,\n      bgHoverColor,\n      allowCreation,\n      notFoundText,\n      renderBadge = defaultRenderBadge,\n      renderCheckIcon = defaultRenderCheckIcon,\n      renderCreateIcon = defaultCreateIcon,\n      ...rest\n    }: AutocompleteProps,\n    ref\n  ) => {\n    const [optionsCopy, setOptionsCopy] = useState<Option[]>(options);\n    const [partialResult, setPartialResult] = useState<Option[]>();\n    const [displayOptions, setDisplayOptions] = useState<boolean>(false);\n    const [inputValue, setInputValue] = useState<string>();\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const filterOptions = (inputValue: string) => {\n      if (inputValue) {\n        setDisplayOptions(true);\n        setPartialResult(\n          matchSorter(optionsCopy, inputValue, { keys: ['label', 'value'] })\n        );\n        setInputValue(inputValue);\n      } else {\n        setDisplayOptions(false);\n      }\n    };\n\n    const selectOption = (option: Option) => {\n      if (result.includes(option)) {\n        setResult([\n          ...result.filter(\n            (existingOption) => existingOption.value !== option.value\n          ),\n        ]);\n      } else {\n        setResult([option, ...result]);\n      }\n    };\n\n    const isOptionSelected = (option: Option) => {\n      return (\n        result.filter((selectedOption) => selectedOption.value === option.value)\n          .length > 0\n      );\n    };\n\n    const createOption = () => {\n      if (inputValue && allowCreation) {\n        const newOption: Option = {\n          label: inputValue,\n          value: inputValue,\n        };\n        setOptionsCopy([newOption, ...optionsCopy]);\n        selectOption(newOption);\n        setDisplayOptions(false);\n        if (inputRef && inputRef.current !== null) {\n          inputRef.current.value = '';\n        }\n      }\n    };\n\n    const selectOptionFromList = (option: Option) => {\n      selectOption(option);\n      setDisplayOptions(false);\n      if (inputRef && inputRef.current !== null) {\n        inputRef.current.value = '';\n      }\n    };\n\n    const checkIcon = (option: Option) => {\n      if (isOptionSelected(option)) {\n        return renderCheckIcon(option);\n      }\n      return null;\n    };\n\n    return (\n      <Box data-testid=\"simple-autocomplete\">\n        {result.length > 0 && (\n          <Box my={2}>\n            {result.map((option) => (\n              <Box\n                d=\"inline-block\"\n                onClick={() => selectOption(option)}\n                key={option.value}\n              >\n                {renderBadge(option)}\n              </Box>\n            ))}\n          </Box>\n        )}\n        <Input\n          onChange={(e) => filterOptions(e.currentTarget.value)}\n          ref={mergeRefs([inputRef, ref])}\n          {...rest}\n        />\n        {displayOptions && (\n          <List\n            borderWidth=\"1px\"\n            borderColor=\"gray.200\"\n            borderRadius=\"md\"\n            boxShadow=\"6px 5px 8px rgba(0,50,30,0.02)\"\n            mt={2}\n          >\n            {partialResult?.map((option) => {\n              return (\n                <ListItem\n                  key={option.value}\n                  _hover={{ bg: bgHoverColor || 'gray.100' }}\n                  my={1}\n                  p={2}\n                  cursor=\"pointer\"\n                  onClick={() => selectOptionFromList(option)}\n                >\n                  <Flex align=\"center\">\n                    {checkIcon(option)}\n                    {option.label}\n                  </Flex>\n                </ListItem>\n              );\n            })}\n            {!partialResult?.length && allowCreation && (\n              <ListItem\n                _hover={{ bg: bgHoverColor || 'gray.100' }}\n                my={1}\n                p={2}\n                cursor=\"pointer\"\n                data-testid=\"create-option\"\n                onClick={() => createOption()}\n              >\n                <Flex align=\"center\">{renderCreateIcon()}</Flex>\n              </ListItem>\n            )}\n            {!partialResult?.length && !allowCreation && (\n              <ListItem my={1} p={2} data-testid=\"not-found\">\n                <Flex align=\"center\">{notFoundText}</Flex>\n              </ListItem>\n            )}\n          </List>\n        )}\n      </Box>\n    );\n  }\n);\n\nAutocomplete.displayName = 'Autocomplete';\n\nAutocomplete.defaultProps = {\n  notFoundText: 'Not found',\n  allowCreation: true,\n};\n"]},"metadata":{},"sourceType":"module"}