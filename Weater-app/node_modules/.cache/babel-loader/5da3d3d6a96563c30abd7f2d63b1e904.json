{"ast":null,"code":"var _jsxFileName = \"/home/cmdb-123844/Desktop/WeatherApp/WeatherApp/Weater-app/src/components/searchInput/SearchInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cities from 'cities.json';\nimport { fetchData } from '../../store/thunk/action/app';\nimport { languegeObject } from '../../store/data/languageObject';\nimport { SearchWrapper } from './styledComponents/SearchInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchInput = () => {\n  _s();\n\n  const [value, setValue] = useState('');\n  const [isOpen, setIsOpen] = useState(true);\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.app);\n  const {\n    lang\n  } = state;\n  const filteredCities = cities.filter(cities => {\n    return country.name.toLowerCase().includes(value.toLowerCase());\n  }).splice(0, 10);\n\n  const onKeyPressHandler = e => {\n    if (e.key === 'Enter') {\n      dispatch(fetchData(e.target.value));\n    }\n  };\n\n  const itemClickHandler = e => {\n    dispatch(fetchData(e.target.textContent));\n    setValue(e.target.textContent);\n    setIsOpen(!isOpen);\n  };\n\n  const onChangeHandler = e => {\n    setValue(e.target.value);\n    setIsOpen(true);\n  };\n\n  const inputClickHandler = () => {\n    setIsOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SearchWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"searchInput\",\n      value: value,\n      placeholder: languegeObject[lang].placeholder,\n      onKeyPress: onKeyPressHandler,\n      onChange: onChangeHandler,\n      onClick: inputClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"autocomplete\",\n      children: value && isOpen ? filteredCities.map(country => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"autocompelete_item\",\n          onClick: itemClickHandler,\n          children: country.name\n        }, country.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this);\n      }) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchInput, \"BplIvpGgJe2KiM9C8PrB7XqbSvU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = SearchInput;\nexport default SearchInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchInput\");","map":{"version":3,"sources":["/home/cmdb-123844/Desktop/WeatherApp/WeatherApp/Weater-app/src/components/searchInput/SearchInput.jsx"],"names":["React","useState","useDispatch","useSelector","cities","fetchData","languegeObject","SearchWrapper","SearchInput","value","setValue","isOpen","setIsOpen","dispatch","state","app","lang","filteredCities","filter","country","name","toLowerCase","includes","splice","onKeyPressHandler","e","key","target","itemClickHandler","textContent","onChangeHandler","inputClickHandler","placeholder","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,cAAT,QAA+B,iCAA/B;AAEA,SAASC,aAAT,QAA8B,gCAA9B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMY,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,KAAK,GAAGX,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,GAAlB,CAAzB;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAWF,KAAjB;AAEA,QAAMG,cAAc,GAAGb,MAAM,CAC1Bc,MADoB,CACZd,MAAD,IAAY;AAClB,WAAOe,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCb,KAAK,CAACY,WAAN,EAApC,CAAP;AACD,GAHoB,EAIpBE,MAJoB,CAIb,CAJa,EAIV,EAJU,CAAvB;;AAMA,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACrBb,MAAAA,QAAQ,CAACR,SAAS,CAACoB,CAAC,CAACE,MAAF,CAASlB,KAAV,CAAV,CAAR;AACD;AACF,GAJD;;AAMA,QAAMmB,gBAAgB,GAAIH,CAAD,IAAO;AAC9BZ,IAAAA,QAAQ,CAACR,SAAS,CAACoB,CAAC,CAACE,MAAF,CAASE,WAAV,CAAV,CAAR;AACAnB,IAAAA,QAAQ,CAACe,CAAC,CAACE,MAAF,CAASE,WAAV,CAAR;AACAjB,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAJD;;AAMA,QAAMmB,eAAe,GAAIL,CAAD,IAAO;AAC7Bf,IAAAA,QAAQ,CAACe,CAAC,CAACE,MAAF,CAASlB,KAAV,CAAR;AACAG,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAHD;;AAKA,QAAMmB,iBAAiB,GAAG,MAAM;AAC9BnB,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAFD;;AAIA,sBACE,QAAC,aAAD;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,KAAK,EAAEH,KAFT;AAGE,MAAA,WAAW,EAAEH,cAAc,CAACU,IAAD,CAAd,CAAqBgB,WAHpC;AAIE,MAAA,UAAU,EAAER,iBAJd;AAKE,MAAA,QAAQ,EAAEM,eALZ;AAME,MAAA,OAAO,EAAEC;AANX;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAI,MAAA,SAAS,EAAC,cAAd;AAAA,gBACGtB,KAAK,IAAIE,MAAT,GACGM,cAAc,CAACgB,GAAf,CAAoBd,OAAD,IAAa;AAC9B,4BACE;AACE,UAAA,SAAS,EAAC,oBADZ;AAGE,UAAA,OAAO,EAAES,gBAHX;AAAA,oBAKGT,OAAO,CAACC;AALX,WAEOD,OAAO,CAACC,IAFf;AAAA;AAAA;AAAA;AAAA,gBADF;AASD,OAVD,CADH,GAYG;AAbN;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CA/DD;;GAAMZ,W;UAIaN,W,EACHC,W;;;KALVK,W;AAiEN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cities from 'cities.json';\n\nimport { fetchData } from '../../store/thunk/action/app';\nimport { languegeObject } from '../../store/data/languageObject';\n\nimport { SearchWrapper } from './styledComponents/SearchInput';\n\nconst SearchInput = () => {\n  const [value, setValue] = useState('');\n  const [isOpen, setIsOpen] = useState(true);\n\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state.app);\n\n  const { lang } = state;\n\n  const filteredCities = cities\n    .filter((cities) => {\n      return country.name.toLowerCase().includes(value.toLowerCase());\n    })\n    .splice(0, 10);\n\n  const onKeyPressHandler = (e) => {\n    if (e.key === 'Enter') {\n      dispatch(fetchData(e.target.value));\n    }\n  };\n\n  const itemClickHandler = (e) => {\n    dispatch(fetchData(e.target.textContent));\n    setValue(e.target.textContent);\n    setIsOpen(!isOpen);\n  };\n\n  const onChangeHandler = (e) => {\n    setValue(e.target.value);\n    setIsOpen(true);\n  };\n\n  const inputClickHandler = () => {\n    setIsOpen(true);\n  };\n\n  return (\n    <SearchWrapper>\n      <input\n        className=\"searchInput\"\n        value={value}\n        placeholder={languegeObject[lang].placeholder}\n        onKeyPress={onKeyPressHandler}\n        onChange={onChangeHandler}\n        onClick={inputClickHandler}\n      />\n      <ul className=\"autocomplete\">\n        {value && isOpen\n          ? filteredCities.map((country) => {\n              return (\n                <li\n                  className=\"autocompelete_item\"\n                  key={country.name}\n                  onClick={itemClickHandler}\n                >\n                  {country.name}\n                </li>\n              );\n            })\n          : null}\n      </ul>\n    </SearchWrapper>\n  );\n};\n\nexport default SearchInput;\n"]},"metadata":{},"sourceType":"module"}